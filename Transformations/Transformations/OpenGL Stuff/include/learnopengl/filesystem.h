#ifndef FILESYSTEM_H
#define FILESYSTEM_H

#include <string>
#include <cstdlib>
#include "root_directory.h" // This is a configuration file generated by CMake.

#include <windows.h>

#include <iostream>
using namespace std;;




class FileSystem
{

public:
	static string ExePath() {
		
		
		char buffer[MAX_PATH];
		GetModuleFileName(NULL, buffer, MAX_PATH);
		string::size_type pos = string(buffer).find_last_of("\\/"); // - Debug
		pos = string(buffer).substr(0, pos).find_last_of("\\/");
		string::size_type pos2 = string(buffer).substr(0, pos).find_last_of("\\/");
		static string split = string(buffer).substr(pos2,pos-pos2);
		return string(buffer).substr(0, pos) + split;
	}


private:
  typedef std::string (*Builder) (const std::string& path);

public:
  static std::string getPath(const std::string& path)
  {
    static std::string(*pathBuilder)(std::string const &) = getPathBuilder();
    return (*pathBuilder)(path);
  }

private:
  static std::string const & getRoot()
  {
	  
	  //cout << "my directory is " << ExePath() << "\n";
	  static string s = ExePath();
	  const char* cnstCharPtr = s.c_str();
	  static char const * envRoot = cnstCharPtr;// getenv("LOGL_ROOT_PATH");
    static char const * givenRoot = (envRoot != nullptr ? envRoot : logl_root);
    static std::string root = (givenRoot != nullptr ? givenRoot : "");
    return root;
  }



  //static std::string(*foo (std::string const &)) getPathBuilder()
  static Builder getPathBuilder()
  {
    if (getRoot() != "")
      return &FileSystem::getPathRelativeRoot;
    else
      return &FileSystem::getPathRelativeBinary;
  }

  static std::string getPathRelativeRoot(const std::string& path)
  {
    return getRoot() + std::string("/") + path;
  }

  static std::string getPathRelativeBinary(const std::string& path)
  {
    return "../../../" + path;
  }


};

// FILESYSTEM_H
#endif
